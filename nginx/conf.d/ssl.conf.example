# SSL Configuration for Production
# Copy this file to ssl.conf and update the certificate paths

server {
    listen 443 ssl http2;
    server_name _;

    # SSL Configuration
    ssl_certificate /etc/ssl/certs/domain-checker.crt;
    ssl_certificate_key /etc/ssl/private/domain-checker.key;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Use environment variables with fallback defaults
    set_by_lua_block $backend_api_url {
        return os.getenv("BACKEND_API_URL") or "http://localhost:3010/api/public/funnels/check-domain"
    }
    
    set_by_lua_block $fe_private_url {
        return os.getenv("FRONTEND_PRIVATE_URL") or "http://localhost:3010/api/private/funnels/"
    }
    
    set_by_lua_block $fallback_url {
        return os.getenv("FALLBACK_URL") or "https://fallback.yourdomain.com"
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }

    # Admin endpoint for cache management (restrict access in production)
    location /admin/cache/clear {
        access_log off;
        allow 127.0.0.1;
        deny all;
        
        content_by_lua_block {
            local domain_cache = ngx.shared.domain_cache
            domain_cache:flush_all()
            ngx.say("Cache cleared successfully")
        }
    }

    # Main domain proxy location
    location / {
        # Apply rate limiting
        limit_req zone=domain_check burst=20 nodelay;
        
        # Custom logging for domain checks
        access_log /var/log/nginx/domain_check.log domain_check;
        
        access_by_lua_file /etc/nginx/lua/check-domain.lua;
        proxy_pass $fe_private_url;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Handle proxy errors
        proxy_intercept_errors on;
        error_page 502 503 504 = @backend_error;
    }

    # Handle rate limit errors
    error_page 429 = @rate_limit_error;
    
    location @rate_limit_error {
        return 429 "Rate limit exceeded. Please try again later.";
        add_header Content-Type text/plain;
    }

    # Handle backend errors
    location @backend_error {
        return 503 "Service temporarily unavailable. Please try again later.";
        add_header Content-Type text/plain;
    }

    error_page 403 = @redirect_fallback;

    location @redirect_fallback {
        return 302 $fallback_url;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name _;
    return 301 https://$server_name$request_uri;
} 